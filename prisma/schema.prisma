// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
    // shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    type          String    @default("user")
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model kkh {
    id_kkh        Int    @id @default(autoincrement())
    berat_badan   Float
    tinggi_badan  Float
    umur          Int
    pekerjaan     String
    aktivitas     String
    jenis_kelamin String
    email         String
    kkh           Int

    created_at DateTime @default(now())
}

model makanan {
  id_makanan   Int      @id @default(autoincrement())
  kode_makanan String   @unique
  nama_makanan String
  aturan       aturan?  @relation("AturanMakanan", fields: [aturan_id], references: [id_aturan], map: "makanan_aturan_fkey")
  aturan_id    Int
}

model berat_badan {
  id_berat    Int          @id @default(autoincrement())
  kode_berat  String       @unique
  max         Float
  min         Float
  aturan      aturan[]    
}

model aturan {
  id_aturan         Int          @id @default(autoincrement())
  makanan           makanan[]    @relation("AturanMakanan")
  berat_badan       berat_badan  @relation(fields: [berat_badan_id], references: [id_berat])
  berat_badan_id    Int
}



