import type { NextPage } from "next";
import Head from "next/head";
import { useRouter } from "next/router";
import { useRef, useState } from "react";

const Daftar: NextPage = () => {
  type DataDiri = {
    nama: string;
    username: string;
    password: string;
  };
  const router = useRouter();
  const btnModal = useRef<HTMLButtonElement>(null);
  const [dataDiri, setDataDiri] = useState<DataDiri>({
    nama: "",
    username: "",
    password: "",
  });

  const handleChange = (e: any) => {
    let { name, value } = e.target;
    value = name === "umur" ? parseInt(value) : value;
    setDataDiri({ ...dataDiri, [name]: value });
  };

  const onSubmit = async () => {
    const body = JSON.stringify(dataDiri);

    // check if data empty
    if (Object.values(dataDiri).includes("")) {
      alert("Mohon lengkapi data diri anda⚠");
      return;
    }

    null !== btnModal.current && btnModal.current.click();
    // check if username valid
    const usernameValid = await fetch("/api/user/getUsername", {
      method: "POST",
      headers: { "content-Type": "application/json" },
      body: JSON.stringify({ username: dataDiri.username }),
    })
      .then((res) => res.json())
      .then((data) => {
        if (data.sudah_ada) {
          null !== btnModal.current && btnModal.current.click();
          alert("Username tidak tersedia⚠");
          return false;
        }
        return !data.sudah_ada;
      });

    // create data responden & re-routing
    if (usernameValid) {
      await fetch("/api/user/create", {
        method: "POST",
        headers: { "content-Type": "application/json" },
        body,
      })
        .then((res) => {
          null !== btnModal.current && btnModal.current.click();
          return res.json();
        })
        .then((data) => {
          localStorage.setItem(
            "user-login",
            JSON.stringify({ ...dataDiri, id_user: data.user.id_user })
          );
          router.push("input-data");
        });
    }
  };

  const Loading = () => (
    <div>
      <div
        className="modal fade fixed top-0 left-0 hidden h-full w-full overflow-y-auto overflow-x-hidden outline-none"
        id="staticBackdrop"
        data-bs-backdrop="static"
        data-bs-keyboard="false"
        tabIndex={-1}
        aria-labelledby="staticBackdropLabel"
        aria-hidden="true"
      >
        <div className="modal-dialog pointer-events-none relative flex w-auto justify-center">
          <div className="modal-content pointer-events-auto relative flex w-2/3 flex-col rounded-md border-none bg-white bg-clip-padding text-current shadow-lg outline-none">
            <div className="modal-header flex flex-shrink-0 items-center justify-between rounded-t-md p-4">
              <h5
                className="text-xl font-medium leading-normal text-gray-800"
                id="exampleModalLabel"
              >
                Loading...
              </h5>
            </div>
          </div>
        </div>
      </div>
    </div>
  );

  return (
    <div className="flex h-screen w-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
      <Head>
        <title>Buat akun Baru</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Loading />
      <div className="flex w-80 flex-col items-center justify-between rounded-lg bg-white bg-opacity-95 shadow-md">
        {/* <img src={'/img/skincare.jpg'} className='rounded-t-lg' /> */}
        <div className="mb-2 py-2 text-center text-2xl font-bold text-blue-700">
          Buat Akun Baru
        </div>
        <div className="mb-2 w-64 flex-1 justify-around">
          {/* username */}
          <label
            htmlFor="username"
            className="block text-sm font-medium leading-5 text-gray-700"
          >
            Username
          </label>
          <input
            name="username"
            onChange={handleChange}
            type="text"
            className="m-0 my-1 mb-2 w-full rounded border border-solid border-gray-300 bg-white px-3 py-1.5 font-normal text-gray-700 transition ease-in-out focus:border-blue-600 focus:bg-white focus:text-gray-700 focus:outline-none"
            id="username"
          />
          {/* password */}
          <label
            htmlFor="password"
            className="block text-sm font-medium leading-5 text-gray-700"
          >
            Password
          </label>
          <input
            name="password"
            onChange={handleChange}
            type="password"
            className="m-0 my-1 mb-2 w-full rounded border border-solid border-gray-300 bg-white px-3 py-1.5 font-normal text-gray-700 transition ease-in-out focus:border-blue-600 focus:bg-white focus:text-gray-700 focus:outline-none"
            id="password"
          />
        </div>
        <button
          onClick={onSubmit}
          type="submit"
          className="mb-4 w-64 rounded bg-blue-600 px-6 py-2.5 text-xs font-medium leading-tight text-white shadow-md transition duration-150 ease-in-out hover:bg-blue-700 hover:shadow-lg focus:bg-blue-700 focus:shadow-lg focus:outline-none focus:ring-0 active:bg-blue-800 active:shadow-lg"
        >
          MULAI
        </button>
      </div>
      <div className="p-3 text-center text-gray-400">
        Belum punya akun?{" "}
        <span
          onClick={() => router.push("daftar")}
          className="cursor-pointer font-semibold text-blue-600 underline"
        >
          Daftar disini
        </span>
      </div>
    </div>
  );
};

export default Daftar;
